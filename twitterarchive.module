<?php

/**
 * @file
 *
 * Module for importing Twitterarchive data from JSON data files into the Twitterarchive entity
 */

include_once drupal_get_path('module', 'twitterarchive') . '/includes/twitterarchive.controller.inc';

/**
 * Implements hook_permission().
 */
function twitterarchive_permission() {
  return array(
    'administer twitterarchives' =>  array(
      'title' => t('Administer Twitterarchives'),
      'description' => t(''),
    ),
    'view twitterarchives' =>  array(
      'title' => t('View Twitterarchives'),
      'description' => t(''),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function twitterarchive_entity_info() {
  $entity_info['twitterarchive'] = array(
    'label' => t('Twitterarchive'),
    'base table' => 'twitterarchive',
    'uri callback' => 'twitterarchive_uri',
    'controller class' => 'twitterarchiveEntityController',
    'views controller class' => 'EntityDefaultViewsController',
    'module' => 'twitterarchive',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'pid',
    ),
    'static cache' => FALSE,
    'bundles' => array(
      'twitterarchive'=> array(
        'label' => 'Twitterarchive',
        'admin' => array(
          'path' => 'admin/structure/twitterarchive/manage',
          'access arguments' => array('administer twitterarchive'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' =>  FALSE,
      ),
    ),
  );
  return $entity_info;
}

/**
 * Entity URI callback
 */
function twitterarchive_uri($twitterarchive) {
  return array(
    'path' => 'twitterarchive/' . $twitterarchive->id,
  );
}

function twitterarchive_load($pid = NULL, $reset = FALSE) {
    $pids = (isset($pid) ? array($pid) : array());
    $formsub = twitterarchive_load_multiple($pids, $reset);
    return $formsub ? reset($formsub) : FALSE;
}

function twitterarchive_load_multiple($pids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('twitterarchive', $pids, $conditions, $reset);
}

/**
 * Implements hook_menu().
 */
function twitterarchive_menu() {
  $items['admin/structure/twitterarchive/manage'] = array(
    'title' => 'Twitterarchive Admin',
    'description' => 'Manage twitterarchive structure',
    'page callback' => 'twitterarchive_manage',
    'access arguments' => array('administer twitterarchives'),
  );
  $items['twitterarchive/%twitterarchive'] = array(
    'title callback' => 'twitterarchive_page_title',
    'title arguments' => array(1),
    'page callback' => 'twitterarchive_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view twitterarchives'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function twitterarchive_page_title($twitterarchive) {
  return t('Tweet pid: @pid', array('@pid' => $twitterarchive->pid));
}

/**
 * Callback function for [admin/structure/twitterarchive/manage]
 */
function twitterarchive_manage() {
  $content = array();
  $content[] = array(
    '#type' => 'item',
    '#markup' => t('Administration page for Twitterarchive entities')
  );
  $content['table'] = twitterarchive_list_entities();
  return $content;
}

function twitterarchive_list_entities() {
  $content = array();

  // In this basic example we know that there won't be many entities,
  // so just load them all. @see pager_example.module to implement a pager.
  // Most implementations would probably do this with a view using views module,
  // but we avoid using non-core features in the Examples project.
  $entities = twitterarchive_load_multiple(FALSE);

    if (!empty($entities)) {
      foreach ($entities as $entity) {
        $rows[] = array(
          'data' => array(
            'tweet_id' => l($entity->tweet_id, 'https://twitter.com/' . $entity->username . '/status/' . $entity->tweet_id, array('absolute' => TRUE)),
            'tweettext' => twitterarchive_format_tweet($entity->tweettext),
            'username' => $entity->username,
            'created' => date('j F Y h:i:s', $entity->created),
            'delete' => l('view', 'twitterarchive/' . $entity->pid) . '&nbsp;|&nbsp;' . l('delete', 'twitterarchive/' . $entity->pid . '/delete'),
          ),
        );
      }
      $content['entity_table'] = array(
        '#theme' => 'table',
        '#rows' => $rows,
        '#header' => array(t('Tweet ID'), t('Tweet'), t('User'), t('Created'), t('')),
      );
    } else {
      $content[] = array(
        '#type' => 'item',
        '#markup' => t('No Twitterarchive entities currently exist!'),
      );
    }
  return $content;
}

/**
 * Callback function for [twitterarchive/%twitterarchive]
 */
function twitterarchive_page_view($twitterarchive, $view_mode = 'full') {
  $twitterarchive->content = array();

  // Build fields content.
  field_attach_prepare_view('twitterarchive', array($twitterarchive->pid => $twitterarchive), $view_mode);
  entity_prepare_view('twitterarchive', array($twitterarchive->pid => $twitterarchive));
  $twitterarchive->content += field_attach_view('twitterarchive', $twitterarchive, $view_mode);

  return $twitterarchive->content;
}

/**
 * Implements hook_theme().
 */
function twitterarchive_theme() {
  return array(
    'tweet_output' => array(
      'variables' => array('tweets' => NULL),
      'template' => 'templates/tweet_output',
    ),
  );
}

/**
 * Preg replace callback function for converting links in tweets to real links
 *
 * @param $matches
 *   The regular expression matches
 * @return
 *   http string in an html link
 */
function _tweet_convert_links($matches) {
  return l($matches[1], $matches[1], array('absolute' => TRUE));
}

/**
 * Preg replace callback function for converting hashtags to links
 *
 * @param $matches
 *   The regular expression matches
 * @return
 *   #hastags in html link
 */
function _tweet_convert_hashtags($matches) {
  return l($matches[1], 'https://twitter.com/search?q=' . urlencode($matches[1]), array('absolute' => TRUE));
}

/**
 * Preg replace callback function for converting @usernames to links
 *
 * @param $matches
 *   The regular expression matches
 * @return
 *   @usernames in html link
 */
function _tweet_convert_usernames($matches) {
  return l('@' . $matches[1], 'https://twitter.com/' . $matches[1], array('absolute' => TRUE));
}

/**
 * Formats tweet to add HTML links for usernames, hashtags, and links
 *
 * @param $tweet_text
 *   The original tweet text
 * @return $tweet_text
 *   The formatted tweet text
 */
function twitterarchive_format_tweet($tweet_text) {
  // [using preg_replace_callback as the 'e' modifier is deprecated]
  $tweet_text = preg_replace_callback('/(https?:\/\/\S+)/i', '_tweet_convert_links', $tweet_text);
  $tweet_text = preg_replace_callback('/(#[a-zA-Z_0-9]+)/i', '_tweet_convert_hashtags', $tweet_text);
  $tweet_text = preg_replace_callback('/@([a-zA-Z_0-9]+)/i', '_tweet_convert_usernames', $tweet_text);
  return $tweet_text;
}

/**
 * Imports twitterarchive tweets to twitterarchive nodes via drush
 *
 * @see twitterarchive_drush_command()
 */
function twitterarchive_drush_import() {
  // get JS data files, remove data.tweets line and merge together
  $data_files = file_scan_directory(drupal_get_path('module', 'twitterarchive') . '/data', '/\.js$/i');
  if (!empty($data_files)) {
    $file_data = array();
    foreach(array_keys($data_files) as $file) {
      $data = @file_get_contents($file);
      if ($data) {
        $data = explode("\n", $data);
        array_shift($data);
        $data = implode("\n", $data);
        $file_data = array_merge($file_data, drupal_json_decode($data));
      }
    }
  }
  else {
    throw new Exception(t("No data files, please add the data/tweets/*.js files from your twitter archive download to the 'data' folder of this module"));
  }

  if (!empty($file_data)) {
    foreach ($file_data as $item) {
      // create node
      $ctime = strtotime($item['created_at']);
      // create entity
      $entity = new stdClass;
      $entity->title = 'Tweet ' . $item['id'];
      $entity->type = 'twitterarchive';
      $entity->tweet_id = $item['id'];
      $entity->tweettext = $item['text'];
      $entity->username = $item['user']['screen_name'];
      $entity->changed = $ctime;
      $entity->created = $ctime;
      $entity->status = 1;
      drupal_write_record('twitterarchive', $entity);

      drush_print(t("\nTweet ID: @id imported\n", array('@id' => $item['id_str'])));
    }
  }
}
